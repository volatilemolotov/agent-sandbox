---
apiVersion: v1
kind: Secret
metadata:
  name: jupyter-hf-token
  namespace: default
type: Opaque
stringData:
  token: "HF_TOKEN"  # Replace with actual token or use --from-literal

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyter-init-files
  namespace: default
data:
  download_models.py: |
    import sys
    from huggingface_hub import snapshot_download

    if __name__ == "__main__":
        model_names = [
            "Qwen/Qwen3-Embedding-0.6B",
        ]

        cache_dir = sys.argv[1] if len(sys.argv) > 1 else None
        
        for model_name in model_names:
            print(f"--- Downloading {model_name} ---")
            try:
                if cache_dir:
                    snapshot_download(repo_id=model_name, cache_dir=cache_dir)
                else:
                    snapshot_download(repo_id=model_name)
                print(f"Successfully cached {model_name}")
            except Exception as e:
                print(f"Failed to download {model_name}. Error: {e}")

        print("--- Model download process finished. ---")

  welcome.ipynb: |
    {
     "cells": [
      {
       "cell_type": "code",
       "execution_count": null,
       "id": "8048aa56-4549-4afa-b8b0-d111cc7020c3",
       "metadata": {},
       "outputs": [],
       "source": [
        "# Requires transformers>=4.51.0\n",
        "\n",
        "import torch\n",
        "import torch.nn.functional as F\n",
        "\n",
        "from torch import Tensor\n",
        "from transformers import AutoTokenizer, AutoModel\n",
        "\n",
        "\n",
        "def last_token_pool(last_hidden_states: Tensor,\n",
        "                 attention_mask: Tensor) -> Tensor:\n",
        "    left_padding = (attention_mask[:, -1].sum() == attention_mask.shape[0])\n",
        "    if left_padding:\n",
        "        return last_hidden_states[:, -1]\n",
        "    else:\n",
        "        sequence_lengths = attention_mask.sum(dim=1) - 1\n",
        "        batch_size = last_hidden_states.shape[0]\n",
        "        return last_hidden_states[torch.arange(batch_size, device=last_hidden_states.device), sequence_lengths]\n",
        "\n",
        "\n",
        "def get_detailed_instruct(task_description: str, query: str) -> str:\n",
        "    return f'Instruct: {task_description}\\nQuery:{query}'\n",
        "\n",
        "# Each query must come with a one-sentence instruction that describes the task\n",
        "task = 'Given a web search query, retrieve relevant passages that answer the query'\n",
        "\n",
        "queries = [\n",
        "    get_detailed_instruct(task, 'What is the capital of China?'),\n",
        "    get_detailed_instruct(task, 'Explain gravity')\n",
        "]\n",
        "# No need to add instruction for retrieval documents\n",
        "documents = [\n",
        "    \"The capital of China is Beijing.\",\n",
        "    \"Gravity is a force that attracts two bodies towards each other. It gives weight to physical objects and is responsible for the movement of planets around the sun.\"\n",
        "]\n",
        "input_texts = queries + documents\n",
        "\n",
        "tokenizer = AutoTokenizer.from_pretrained('Qwen/Qwen3-Embedding-0.6B', padding_side='left')\n",
        "model = AutoModel.from_pretrained('Qwen/Qwen3-Embedding-0.6B')\n",
        "\n",
        "max_length = 8192\n",
        "\n",
        "# Tokenize the input texts\n",
        "batch_dict = tokenizer(\n",
        "    input_texts,\n",
        "    padding=True,\n",
        "    truncation=True,\n",
        "    max_length=max_length,\n",
        "    return_tensors=\"pt\",\n",
        ")\n",
        "batch_dict.to(model.device)\n",
        "outputs = model(**batch_dict)\n",
        "embeddings = last_token_pool(outputs.last_hidden_state, batch_dict['attention_mask'])\n",
        "\n",
        "# normalize embeddings\n",
        "embeddings = F.normalize(embeddings, p=2, dim=1)\n",
        "scores = (embeddings[:2] @ embeddings[2:].T)\n",
        "print(scores.tolist())"
       ]
      }
     ],
     "metadata": {
      "kernelspec": {
       "display_name": "Python 3 (ipykernel)",
       "language": "python",
       "name": "python3"
      },
      "language_info": {
       "codemirror_mode": {
        "name": "ipython",
        "version": 3
       },
       "file_extension": ".py",
       "mimetype": "text/x-python",
       "name": "python",
       "nbconvert_exporter": "python",
       "pygments_lexer": "ipython3",
       "version": "3.12.10"
      }
     },
     "nbformat": 4,
     "nbformat_minor": 5
    }

  requirements.txt: |
    transformers>=4.51.0
    torch
    huggingface_hub
    ipywidgets

---
apiVersion: agents.x-k8s.io/v1alpha1
kind: Sandbox
metadata:
  name: jupyterlab-sandbox
  namespace: default
spec:
  podTemplate:
    metadata:
      labels:
        app: jupyterlab
        sandbox: jupyterlab
    spec:
      initContainers:
        - name: setup-environment
          image: jupyterhub/k8s-singleuser-sample:4.2.0
          command:
            - /bin/bash
            - -c
            - |
              set -e
              
              if [ -f /home/jovyan/.initialized ]; then
                echo "Already initialized, skipping..."
                exit 0
              fi
              
              mkdir -p /home/jovyan/.pip-cache
              mkdir -p /home/jovyan/.tmp
              mkdir -p /home/jovyan/work
              mkdir -p /home/jovyan/.local
              mkdir -p /home/jovyan/.cache/huggingface
              
              echo "Installing Python dependencies to persistent storage..."
              pip install --no-cache-dir \
                --target=/home/jovyan/.local/lib/python3.12/site-packages \
                -r /config/requirements.txt
              
              python /config/download_models.py /home/jovyan/.cache/huggingface
              
              echo "Copying notebook files..."
              cp /config/welcome.ipynb /home/jovyan/work/welcome.ipynb
              
              touch /home/jovyan/.initialized

              chown -R jovyan:users /home/jovyan
              
              echo "Initialization complete!"
          env:
            - name: HF_TOKEN
              valueFrom:
                secretKeyRef:
                  name: jupyter-hf-token
                  key: token
            - name: HF_HOME
              value: /home/jovyan/.cache/huggingface
            - name: PIP_CACHE_DIR
              value: /home/jovyan/.pip-cache
            - name: TMPDIR
              value: /home/jovyan/.tmp
            - name: TEMP
              value: /home/jovyan/.tmp
            - name: TMP
              value: /home/jovyan/.tmp
          volumeMounts:
            - name: workspace
              mountPath: /home/jovyan
            - name: init-files
              mountPath: /config
              readOnly: true
          resources:
            requests:
              cpu: "500m"
              memory: "2Gi"
              ephemeral-storage: "1Gi"
            limits:
              cpu: "2"
              memory: "4Gi"
              ephemeral-storage: "1Gi"
          securityContext:
            runAsUser: 0  # Need root for chown

      securityContext:
        fsGroup: 100  # users group - for volume permissions

      containers:
        - name: jupyterlab
          image: jupyterhub/k8s-singleuser-sample:4.2.0
          command:
            - jupyter
            - lab
          args:
            - --ip=0.0.0.0
            - --port=8888
            - --notebook-dir=/home/jovyan/work
            - --ServerApp.token=''
            - --ServerApp.password=''
            - --ServerApp.allow_origin='*'
            - --ServerApp.disable_check_xsrf=True
          env:
            - name: HF_TOKEN
              valueFrom:
                secretKeyRef:
                  name: jupyter-hf-token
                  key: token
            - name: JUPYTER_ENABLE_LAB
              value: "yes"
            - name: HF_HOME
              value: /home/jovyan/.cache/huggingface
            - name: PYTHONPATH
              value: /home/jovyan/.local/lib/python3.12/site-packages
          ports:
            - containerPort: 8888
              name: notebook
              protocol: TCP
          volumeMounts:
            - name: workspace
              mountPath: /home/jovyan
          resources:
            requests:
              cpu: "1"
              memory: "2Gi"
              ephemeral-storage: "1Gi"
            limits:
              cpu: "4"
              memory: "8Gi"
              ephemeral-storage: "2Gi"
          securityContext:
            runAsUser: 1000  # jovyan user
            runAsGroup: 100  # users group
            allowPrivilegeEscalation: false

      volumes:
        - name: init-files
          configMap:
            name: jupyter-init-files

  volumeClaimTemplates:
    - metadata:
        name: workspace
      spec:
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 20Gi